void BASE_GetCurrentScore(STRUCT_MOB& mob, STRUCT_AFFECT* affect) //00406a50 - ok - revisar
{
	mob.AffectInfo = 0;
	unsigned short currentHP = mob.CurrentScore.Hp;
	if(currentHP <= 0) // implementado para proteger o overflow da variavel
		currentHP = 0;
	if(currentHP >= 65000) // implementado para proteger o overflow da variavel
		currentHP = 65000;

	unsigned short currentMP = mob.CurrentScore.Mp;
	if(currentMP <= 0) // implementado para proteger o overflow da variavel
		currentMP = 0;
	if(currentMP >= 65000) // implementado para proteger o overflow da variavel
		currentMP = 65000;

	mob.CurrentScore = mob.BaseScore;
	mob.CurrentScore.Hp = currentHP;
	mob.CurrentScore.Mp = currentMP;

	int defence = (BASE_GetMobAbility(&mob, EF_AC) + BASE_GetMobAbility(&mob, EF_ACADD));
	mob.CurrentScore.Defense += defence;
	mob.CurrentScore.Attack += BASE_GetMobAbility(&mob, EF_DAMAGE);
	mob.CurrentScore.MaxHp += BASE_GetMobAbility(&mob, EF_HP);
	mob.CurrentScore.MaxMp += BASE_GetMobAbility(&mob, EF_MP);

	mob.CurrentScore.STR += BASE_GetMobAbility(&mob, EF_STR);
	mob.CurrentScore.INT += BASE_GetMobAbility(&mob, EF_INT);
	mob.CurrentScore.DEX += BASE_GetMobAbility(&mob, EF_DEX);
	mob.CurrentScore.CON += BASE_GetMobAbility(&mob, EF_CON);

	int special1 = BASE_GetMobAbility(&mob, EF_SPECIAL1);
	if(special1 >= 255) // implementado para proteger o overflow da variavel
		special1 = 255;
	int special2 = BASE_GetMobAbility(&mob, EF_SPECIAL2);
	if(special2 >= 255) // implementado para proteger o overflow da variavel
		special2 = 255;
	int special3 = BASE_GetMobAbility(&mob, EF_SPECIAL3);
	if(special3 >= 255) // implementado para proteger o overflow da variavel
		special3 = 255;
	int special4 = BASE_GetMobAbility(&mob, EF_SPECIAL4);
	if(special4 >= 255) // implementado para proteger o overflow da variavel
		special4 = 255;

	mob.CurrentScore.Master[0] = special1;
	mob.CurrentScore.Master[1] = special2;
	mob.CurrentScore.Master[2] = special3;
	mob.CurrentScore.Master[3] = special4;
	mob.SaveMana += BASE_GetMobAbility(&mob, EF_SAVEMANA);

	int calcMagicIncrement = (BASE_GetMobAbility(&mob, EF_MAGIC) + BASE_GetMobAbility(&mob, EF_MAGICADD));
	calcMagicIncrement = ((calcMagicIncrement + 1) >> 1);
	if(calcMagicIncrement >= 255) // implementado para proteger o overflow da variavel
		calcMagicIncrement = 255;

	mob.MagicIncrement = calcMagicIncrement;

	int speed = (mob.CurrentScore.Reserved & 0xF);
	speed = (speed + BASE_GetMobAbility(&mob, EF_RUNSPEED));

	int attspeed = ((mob.BaseScore.AttackRun >> 4) * 10);
	attspeed = (attspeed + BASE_GetMobAbility(&mob, EF_ATTSPEED));

	int regenHP = BASE_GetMobAbility(&mob, EF_REGENHP);
	int regenMP = BASE_GetMobAbility(&mob, EF_REGENMP);

	int body = mob.Equip[0].Index / 10;
	if(body < 4)
	{
		mob.Equip[0].EF1 = 43;
		mob.Equip[0].EFV1 = 0;

		if(mob.CapeInfo == 7 || mob.CapeInfo == 8 || mob.CapeInfo == 9)
			mob.CapeInfo = 0;
	}

	int cape = mob.Equip[CAPE].Index;
	if(mob.CapeInfo != 4)
		if(cape == 543 || cape == 545 || cape == 734 || cape == 736)
			mob.CapeInfo = 7;
	if(mob.CapeInfo != 4)
		if(cape == 544 || cape == 546 || cape == 735 || cape == 737)
			mob.CapeInfo = 8;

	if(mob.ClassInfo == 3)
	{
		if((mob.Learn & LEARN_10) != 0)
		{
			int weapon = mob.Equip[6].Index;
			if(weapon > 0 || weapon < MAX_ITEMLIST)
			{
				int unique = g_pItemList[weapon].Unique;
				if(unique == 42 || unique == 43)
				{
					int calcsMaster = (special3 / 5) + 10;
					mob.CurrentScore.Attack += calcsMaster;
				}
			}
		}
	}

	int calcHPADD = (BASE_GetMobAbility(&mob, EF_HPADD) + 100);
	mob.CurrentScore.MaxHp = ((mob.CurrentScore.MaxHp * calcHPADD) / 100);

	int calcMPADD = (BASE_GetMobAbility(&mob, EF_MPADD) + 100);
	mob.CurrentScore.MaxMp = ((mob.CurrentScore.MaxMp * calcMPADD) / 100);

	if(mob.Equip[0].Index >= 20 || mob.Equip[0].Index < 30)
		mob.Equip[0].Index = 21;

	int local20 = 0;
	int local21 = 0;
	int local22 = 100;

	//Skills
	int i;
	for(i = 0; i < MAX_AFFECT; i++)
	{
		if(affect != 0)
		{
			int skillType = affect[i].Type;
			if(skillType != 0)
			{
				int skillValue = affect[i].Value;
				int skillLevel = affect[i].Level;
				if(skillType == 1) //Toque Sagrado - Lança de Gelo - Nevasca
				{
					speed = speed - skillValue;
					int decAttSpeed = 30;
					attspeed = attspeed - decAttSpeed;

					if(mob.Equip[0].Index <= 50)
						break;

					int Int = mob.CurrentScore.INT;
					Int = Int - (decAttSpeed + 10);
					mob.CurrentScore.INT = Int;
					break;
				}
				if(skillType == 2) //Velocidade
				{
					speed = speed + skillValue;
					mob.AffectInfo = mob.AffectInfo | RSV_VELOC;
					break;
				}
				if(skillType == 3) //Perseguição
				{
					int totResist = 0;
					int decResist = skillValue;
					if(mob.Equip[0].Index < 50)
						decResist = decResist >> 1;
					else
						decResist = decResist - 10;

					totResist = mob.Resist1 - decResist;
					if(totResist <= -50) // implementado para proteger o overflow da variavel
						totResist = -50;
					if(totResist >= 100) // implementado para proteger o overflow da variavel
						totResist = 100;

					mob.Resist1 = totResist;

					totResist = 0;
					totResist = mob.Resist2 - decResist;
					if(totResist <= -50) // implementado para proteger o overflow da variavel
						totResist = -50;
					if(totResist >= 100) // implementado para proteger o overflow da variavel
						totResist = 100;

					mob.Resist2 = totResist;

					totResist = 0;
					totResist = mob.Resist3 - decResist;
					if(totResist <= -50) // implementado para proteger o overflow da variavel
						totResist = -50;
					if(totResist >= 100) // implementado para proteger o overflow da variavel
						totResist = 100;

					mob.Resist3 = totResist;

					totResist = 0;
					totResist = mob.Resist3 - decResist;
					if(totResist <= -50) // implementado para proteger o overflow da variavel
						totResist = -50;
					if(totResist >= 100) // implementado para proteger o overflow da variavel
						totResist = 100;

					mob.Resist3 = totResist;
					break;
				}
				if(skillType == 4) // Limite da Alma
				{
					local22 = local22 + 3;
					mob.CurrentScore.Attack = mob.CurrentScore.Attack + 20;

					int calcMIncrement = mob.MagicIncrement + 5;
					if(calcMIncrement >= 255) // implementado para proteger o overflow da variavel
						calcMIncrement = 255;

					mob.MagicIncrement = calcMIncrement;
					break;
				}
				if(skillType == 5)
				{
					float decDex = (100 - skillValue) / 100;
					mob.CurrentScore.DEX = (mob.CurrentScore.DEX * decDex);
					break;
				}
				if(skillType == 6)
				{
					float incDex = (100 + skillValue) / 100;
					mob.CurrentScore.DEX = (mob.CurrentScore.DEX * incDex);
					break;
				}
				if(skillType == 7) //Lamina Congelada
				{
					int decAttSpeed = ((skillLevel / 10) + 10);
					attspeed = attspeed - decAttSpeed;
					if(mob.Equip[0].Index > 50)
					{
						int calcINT = mob.CurrentScore.INT;
						calcINT = (calcINT - (decAttSpeed + 10));
						mob.CurrentScore.INT = calcINT;
					}
					break;
				}
				if(skillType == 8) //Mestre das Armas
				{
					int incAttSpeed = ((skillLevel / 10) + 10);
					attspeed = attspeed + incAttSpeed;
					break;
				}
				if(skillType == 9) //Arma Magica - Visão De Caçadora - Toxina De Serpente
				{
					int incAttack = (((skillLevel * 5) / 20) + skillValue);
					incAttack = ((local22 * 3) >> 1);
					local22 = local22 + 5;
					if(mob.ClassInfo == 1)
					{
						if((mob.Learn & LEARN_19) != 0)
						{
							incAttack = incAttack * 3;
							local22 = local22 + 10;
						}
					}
					mob.CurrentScore.Attack = mob.CurrentScore.Attack + incAttack;
					break;
				}
				if(skillType == 10) //Enfraquecer
				{
					int decAttack = ((skillLevel / 5) + skillValue);
					mob.CurrentScore.Attack = mob.CurrentScore.Attack - decAttack;
					break;
				}
				if(skillType == 11) //Escudo Magico
				{
					int incDefence = ((skillLevel / 3) + skillValue);
					mob.CurrentScore.Defense = mob.CurrentScore.Defense + incDefence;
					break;
				}
				if(skillType == 12)
				{
					float decDefense = (100 - skillValue) / 100.0;
					mob.CurrentScore.Defense = (mob.CurrentScore.Defense * decDefense);
					break;
				}
				if(skillType == 13) //Assalto
				{
					int incHP = ((skillLevel / 10) + skillValue);
					local22 = local22 + incHP;

					incHP = mob.CurrentScore.MaxHp;
					incHP = (incHP * 9) / 10;

					mob.CurrentScore.MaxHp = incHP;
					break;
				}
				if(skillType == 14) //Samaritano
				{
					int incCon = ((skillLevel * 3) >> 2) + skillValue;
					mob.CurrentScore.CON = mob.CurrentScore.CON + incCon;
					break;
				}
				if(skillType == 15) //Toque de Atena
				{
					int incSpecial = (skillLevel / 10) + skillValue;
					int calcSpecial = 0;
					calcSpecial = mob.CurrentScore.Master[0] + incSpecial;
					if(calcSpecial >= 255) // implementado para proteger o overflow da variavel
						calcSpecial = 255;

					mob.CurrentScore.Master[0] = calcSpecial;

					calcSpecial = 0;
					calcSpecial = mob.CurrentScore.Master[1] + incSpecial;
					if(calcSpecial >= 255) // implementado para proteger o overflow da variavel
						calcSpecial = 255;

					mob.CurrentScore.Master[1] = calcSpecial;

					calcSpecial = 0;
					calcSpecial = mob.CurrentScore.Master[2] + incSpecial;
					if(calcSpecial >= 255) // implementado para proteger o overflow da variavel
						calcSpecial = 255;

					mob.CurrentScore.Master[2] = calcSpecial;

					calcSpecial = 0;
					calcSpecial = mob.CurrentScore.Master[3] + incSpecial;
					if(calcSpecial >= 255) // implementado para proteger o overflow da variavel
						calcSpecial = 255;

					mob.CurrentScore.Master[3] = calcSpecial;
					break;
				}
				if(skillType == 16) //Mutações BM
				{
					int incStatus;
					int local46;
					int local47;
					int local48;
					int local49;
					int transfID = skillValue - 1;
					if(transfID >= 0 && transfID < 5)
					{
						if(mob.ClassInfo == 2)
						{
							if(transfID == 4)
								mob.Equip[0].Index = transfID + 28;
							else
								mob.Equip[0].Index = transfID + 16;

							int local51 = 0;
							int local52 = 0;
							int local53 = 0;
							int local54 = 0;

							int incLobisomem = mob.Learn & LEARN_17;
							int incHomemUrso = mob.Learn & LEARN_19;
							int incAstaroth = mob.Learn & LEARN_21;

							int local58 = 0;

							if(mob.Equip[0].Index == 22) //Lobisomem
							{
								if(incLobisomem != 0)
								{
									local51 = 10;
									local58 = local58 & 15;
								}
							}
							else if(mob.Equip[0].Index == 23) //HomemUrso
							{
								if(incHomemUrso != 0)
								{
									local52 = 20;
									local58 = local58 + 30;
									local54 = local54 + 20;
								}
							}
							else if(mob.Equip[0].Index == 24) //Astaroth
							{
								if(incAstaroth != 0)
								{
									local51 = 10;
									local52 = 5;
									local53 = 5;
									local58 = local58 + 15;
									local54 = local54 + 20;
								}
							}
							else if(mob.Equip[0].Index == 25) //Titan
							{
								local58 = local58 + 30;
							}
							else if(mob.Equip[0].Index == 32) //Eden
							{
								//implementar bonus da eden
							}

							//00407770
							int refFace = (mob.CurrentScore.Level + special4) / 3;
							refFace = (refFace - pTransBonus[transfID].Sanc) / 12;
							if(refFace <= 0) // implementado para proteger o overflow da variavel
								refFace = 0;
							if(refFace >= 9) // implementado para proteger o overflow da variavel
								refFace = 9;

							mob.Equip[0].EF1 = 43;
							mob.Equip[0].EFV1 = refFace;

							//ataque
							local46 = pTransBonus[transfID].MinAttack + local51;
							local47 = pTransBonus[transfID].MaxAttack + local51;
							local48 = local47 - local46;
							local49 = ((local48 * skillLevel) / 200) + local46;

							incStatus = mob.CurrentScore.Attack;
							if(mob.Equip[0].Index == 22)
								incStatus = incStatus + 10;

							mob.CurrentScore.Attack = incStatus;

							//defesa
							local22 = local22 + local49; //conferir 00407877
							local46 = pTransBonus[transfID].MinDefense + local53;
							local47 = pTransBonus[transfID].MaxDefense + local53;
							local48 = local47 - local46;
							local49 = ((local48 * skillLevel) / 200) + local46;

							incStatus = mob.CurrentScore.Defense;
							incStatus = (incStatus * local49) / 100;
							if(mob.Equip[0].Index == 22)
								incStatus = incStatus + 5;

							mob.CurrentScore.Defense = incStatus;

							//maxHp
							//00407933
							local46 = pTransBonus[transfID].MinHp + local52;
							local47 = pTransBonus[transfID].MaxHp + local52;
							local48 = local47 - local46;
							local49 = ((local48 * skillLevel) / 200) + local46;
							
							incStatus = mob.CurrentScore.MaxHp;
							incStatus = (incStatus * local49) / 100;
							mob.CurrentScore.MaxHp = incStatus;

							//resistencias
							int Res1 = mob.Resist1;
							if(Res1 <= -50) // implementado para proteger o overflow da variavel
								Res1 = -50;
							if(Res1 >= 100) // implementado para proteger o overflow da variavel
								Res1 = 100;

							mob.Resist1 = Res1;

							int Res2 = mob.Resist2;
							if(Res2 <= -50) // implementado para proteger o overflow da variavel
								Res2 = -50;
							if(Res2 >= 100) // implementado para proteger o overflow da variavel
								Res2 = 100;

							mob.Resist2 = Res2;

							int Res3 = mob.Resist3;
							if(Res3 <= -50) // implementado para proteger o overflow da variavel
								Res3 = -50;
							if(Res3 >= 100) // implementado para proteger o overflow da variavel
								Res3 = 100;

							mob.Resist3 = Res3;

							int Res4 = mob.Resist4;
							if(Res4 <= -50) // implementado para proteger o overflow da variavel
								Res4 = -50;
							if(Res4 >= 100) // implementado para proteger o overflow da variavel
								Res4 = 100;

							mob.Resist4 = Res4;

							local20 = pTransBonus[transfID].SpeedAttack + local54;
							local21 = pTransBonus[transfID].SpeedMove;
						}
					}
					break;
				}
				if(skillType == 18) //Controle de Mana - Troca de Espirito
				{
					//00407B2C
					int convMP = (mob.CurrentScore.MaxMp / 5) + ((mob.CurrentScore.Level + skillLevel) >> 1); //00407B56
					mob.CurrentScore.MaxHp = mob.CurrentScore.MaxHp + convMP;
					mob.CurrentScore.MaxMp = mob.CurrentScore.MaxMp - convMP;
					break;
				}
				if(skillType == 19) //Imunidade
				{
					//00407B89
					mob.AffectInfo = mob.AffectInfo | RSV_IMUNIT;
					break;
				}
				if(skillType == 21) //Meditação
				{
					//00407BA5
					int incDefense = (skillLevel / 3) + 10;
					mob.CurrentScore.Defense = mob.CurrentScore.Defense + incDefense;

					int local63 = (skillLevel / 10) + skillValue;
					local22 = local22 + local63;
					break;
				}
				if(skillType == 25) // Proteção Elemental
				{
					//00407BFA
					int incDefense = (skillLevel >> 2) + skillValue;
					mob.CurrentScore.Defense = mob.CurrentScore.Defense + incDefense;
					break;
				}
				if(skillType == 26) //Ligação Spectral - Evasão Aprimorada
				{
					//00407C2E
					mob.AffectInfo = mob.AffectInfo | RSV_PARRY;
					break;
				}
				if(skillType == 27) //Encantar Gelo
				{
					//00407C4A
					mob.AffectInfo = mob.AffectInfo | RSV_FROST;
					break;
				}
				if(skillType == 28) //Invisibilidade
				{
					//00407C63
					mob.AffectInfo = mob.AffectInfo | RSV_HIDE;
					break;
				}
				if(skillType == 29)
				{
					//00407C63
					mob.AffectInfo = mob.AffectInfo | RSV_DRAIN;
					break;
				}
				if(skillType == 30) //Olhos De Aguia
				{
					//00407C63
					mob.AffectInfo = mob.AffectInfo | RSV_VISION;
					break;
				}
				if(skillType == 31) //Armadura Critica - Escudo Dourado
				{
					//00407CAE
					int incDefense = (skillLevel >> 1) + skillValue;
					mob.CurrentScore.Defense = mob.CurrentScore.Defense + incDefense;
					break;
				}
			}
		}
	}
	int j;
	for(j = 1; j <= 7; j++)
	{
		int equipID = mob.Equip[j].Index;
		if(equipID < 0 || equipID > MAX_ITEMLIST)
			continue;

		int itemsanc = BASE_GetItemSanc(&mob.Equip[j]);
		if(itemsanc < 9)
			continue;

		int itempos = g_pItemList[equipID].Pos;
		if(itempos == HELMET)
		{
			int incResist = mob.Resist1 + 30;
			if(incResist >= 100) // implementado para proteger o overflow da variavel
				incResist = 100;

			mob.Resist1 = incResist;

			incResist = mob.Resist2 + 30;
			if(incResist >= 100) // implementado para proteger o overflow da variavel
				incResist = 100;

			mob.Resist2 = incResist;

			incResist = mob.Resist3 + 30;
			if(incResist >= 100) // implementado para proteger o overflow da variavel
				incResist = 100;

			mob.Resist3 = incResist;

			incResist = mob.Resist4 + 30;
			if(incResist >= 100) // implementado para proteger o overflow da variavel
				incResist = 100;

			mob.Resist4 = incResist;
		}
		if(itempos == ARMOR)
		{
			mob.CurrentScore.Defense = mob.CurrentScore.Defense + 25;
		}
		if(itempos == PANTS)
		{
			mob.CurrentScore.Defense = mob.CurrentScore.Defense + 25;
		}
		if(itempos == GLOVES)
		{
			mob.AffectInfo = mob.AffectInfo | 64;
		}
		if(itempos == SHIELD)
		{
			mob.CurrentScore.Defense = mob.CurrentScore.Defense + 25;
			int incResist = mob.Resist1 + 10;
			if(incResist >= 100) // implementado para proteger o overflow da variavel
				incResist = 100;

			mob.Resist1 = incResist;

			incResist = mob.Resist2 + 10;
			if(incResist >= 100) // implementado para proteger o overflow da variavel
				incResist = 100;

			mob.Resist2 = incResist;

			incResist = mob.Resist3 + 10;
			if(incResist >= 100) // implementado para proteger o overflow da variavel
				incResist = 100;

			mob.Resist3 = incResist;

			incResist = mob.Resist4 + 10;
			if(incResist >= 100) // implementado para proteger o overflow da variavel
				incResist = 100;

			mob.Resist4 = incResist;
		}
		if(itempos == WEAPON_POS || itempos == WEAPON2HAND_POS)
		{
			int itemunique = g_pItemList[equipID].Unique;
			if(itemunique == 47)
			{
				mob.MagicIncrement = mob.MagicIncrement + 8;
				if(mob.MagicIncrement >= 255) // implementado para proteger o overflow da variavel
					mob.MagicIncrement = 255;
			}
			else
				mob.CurrentScore.Attack = mob.CurrentScore.Attack + 40;
		}
		continue;
	}
	if(body < 4)
		mob.CurrentScore.Attack = (mob.CurrentScore.Attack + (mob.CurrentScore.STR / 3) + mob.CurrentScore.Master[0] + mob.CurrentScore.Level);

	if(local22 != 100)
		mob.CurrentScore.Attack = (mob.CurrentScore.Attack * local22) / 100;

	//00408062
	if(regenHP <= 0) // implementado para proteger o overflow da variavel
		regenHP = 0;
	if(regenHP >= 255) // implementado para proteger o overflow da variavel
		regenHP = 255;

	mob.RegenHP = regenHP;

	if(regenMP <= 0) // implementado para proteger o overflow da variavel
		regenMP = 0;
	if(regenMP >= 255) // implementado para proteger o overflow da variavel
		regenMP = 255;

	mob.RegenMP = regenMP;

	//004080B4
	mob.CurrentScore.Reserved = (mob.CurrentScore.Reserved & 0xF0) | mob.Merchant;

	//004080D1
	attspeed = (attspeed + local20) + (mob.CurrentScore.DEX / 5);

	//004080EB
	speed = speed + local21;

	int mountID = mob.Equip[14].Index;
	if(body < 4)
	{
		if(mountID >= 2360 || mountID < 2390)
		{
			if(mob.Equip[14].EF1 > 0)
			{
				int mountIndex = mountID - 2360;
				if(speed < g_pMountBonus[mountIndex][4]) //conforme o id da mount, compara o speed dela com o speed do char
					speed = speed + g_pMountBonus[mountIndex][4];
			}
		}
	}
	if(speed <= 0) // implementado para proteger o overflow da variavel
		speed = 0;
	if(speed >= 6) // implementado para proteger o overflow da variavel
		speed = 6;

	if(attspeed <= 0) // implementado para proteger o overflow da variavel
		attspeed = 0;
	if(attspeed >= 150) // implementado para proteger o overflow da variavel
		attspeed = 150;

	attspeed = attspeed / 10;
	mob.CurrentScore.AttackRun = ((attspeed << 4) + speed);

	if(mob.CurrentScore.Hp >= mob.CurrentScore.MaxHp) // implementado para proteger o overflow da variavel
		mob.CurrentScore.Hp = mob.CurrentScore.MaxHp;

	if(mob.CurrentScore.Mp >= mob.CurrentScore.MaxMp) // implementado para proteger o overflow da variavel
		mob.CurrentScore.Mp = mob.CurrentScore.MaxMp;
}